# -*- coding: utf-8 -*-
"""Deliverable 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14fnu6JmZuvRjsrKiWlMBFZzvXRMfcnG4
"""

import requests
from bs4 import BeautifulSoup
from sentence_transformers import SentenceTransformer, util
from transformers import pipeline

def rate_url_validity(user_query: str, url: str) -> dict:
    """
    Evaluates the validity of a given URL by computing various metrics including
    domain trust, content relevance, fact-checking, bias, and citation scores.

    Args:
        user_query (str): The user's original query.
        url (str): The URL to analyze.

    Returns:
        dict: A dictionary containing scores for different validity aspects.
    """

    # === Step 1: Fetch Page Content ===
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, "html.parser")
        page_text = " ".join([p.text for p in soup.find_all("p")])  # Extract paragraph text
    except Exception as e:
        return {"error": f"Failed to fetch content: {str(e)}"}

    # === Step 2: Domain Authority Check (Moz API) ===
    # Replace with actual Moz API call
    domain_trust = 60  # Placeholder value (Scale: 0-100)

    # === Step 3: Content Relevance (Semantic Similarity using Hugging Face) ===
    model = SentenceTransformer('sentence-transformers/all-mpnet-base-v2')
    similarity_score = util.pytorch_cos_sim(model.encode(user_query), model.encode(page_text)).item() * 100

    # === Step 4: Fact-Checking (Google Fact Check API) ===
    fact_check_score = check_facts(page_text)

    # === Step 5: Bias Detection (NLP Sentiment Analysis) ===
    sentiment_pipeline = pipeline("text-classification", model="cardiffnlp/twitter-roberta-base-sentiment")
    sentiment_result = sentiment_pipeline(page_text[:512])[0]  # Process first 512 characters
    bias_score = 100 if sentiment_result["label"] == "POSITIVE" else 50 if sentiment_result["label"] == "NEUTRAL" else 30

    # === Step 6: Citation Check (Google Scholar via SerpAPI) ===
    citation_count = check_google_scholar(url)
    citation_score = min(citation_count * 10, 100)  # Normalize

    # === Step 7: Compute Final Validity Score ===
    final_score = (
        (0.3 * domain_trust) +
        (0.3 * similarity_score) +
        (0.2 * fact_check_score) +
        (0.1 * bias_score) +
        (0.1 * citation_score)
    )

    return {
        "Domain Trust": domain_trust,
        "Content Relevance": similarity_score,
        "Fact-Check Score": fact_check_score,
        "Bias Score": bias_score,
        "Citation Score": citation_score,
        "Final Validity Score": final_score
    }


# === Helper Function: Fact-Checking via Google API ===
def check_facts(text: str) -> int:
    """
    Cross-checks text against Google Fact Check API.
    Returns a score between 0-100 indicating factual reliability.
    """
    api_url = f"https://toolbox.google.com/factcheck/api/v1/claimsearch?query={text[:200]}"
    try:
        response = requests.get(api_url)
        data = response.json()
        if "claims" in data and data["claims"]:
            return 80  # If found in fact-checking database
        return 40  # No verification found
    except:
        return 50  # Default uncertainty score


# === Helper Function: Citation Count via Google Scholar API ===
def check_google_scholar(url: str) -> int:
    """
    Checks Google Scholar citations using SerpAPI.
    Returns the count of citations found.
    """
    serpapi_key = "82b896451b401783c81a1a239b4a701f66feaf913dfa9999db84f77859440e77"
    params = {"q": url, "engine": "google_scholar", "api_key": serpapi_key}
    try:
        response = requests.get("https://serpapi.com/search", params=params)
        data = response.json()
        return len(data.get("organic_results", []))
    except:
        return -1  # Assume no citations found

user_prompt = "What are the lastest technology fields in AI"
url_to_check = "https://www.intel.com/content/www/us/en/products/docs/processors/core-ultra/ai-pc.html?cid=sem&source=sa360&campid=2025_ao_cbu_us_gmocoma_gmocrbu_awa_text-link_generic_broad_cd_HQ-CONS-Premium-EG-AI-OBS_FC25023_google_b2c_is_non-pbm_intel&ad_group=AI-Processor_Broad&intel_term=ai+processors&sa360id=43700081459231372&gad_source=1&gclid=Cj0KCQiA_NC9BhCkARIsABSnSTZLjXNLnGPiJ5KAR6qHw4ULpPJKw6uX6tj-QAAnJ1NyrpSJ9ojeXvQaApw5EALw_wcB&gclsrc=aw.ds"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the latest tools and technologies being widely adopted in the data science industry"
url_to_check = "https://binariks.com/blog/data-science-trends/"

result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the most in-demand skills for data science jobs in 2025?"
url_to_check = "https://www.ccslearningacademy.com/top-data-scientist-skills/"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "How is the role of a data scientist evolving with automation and AI-powered analytics?"
url_to_check = "https://www.sas.com/en_us/insights/analytics/what-is-a-data-scientist.html"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the emerging career paths within data science beyond traditional roles like data scientist or analyst?"
url_to_check = "https://www.nobledesktop.com/classes-near-me/blog/non-traditional-data-analytics-careers"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the latest advancements in machine learning models and their real-world applications?"
url_to_check = "https://mobidev.biz/blog/future-machine-learning-trends-impact-business"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "How are universities incorporating ethical AI and responsible AI practices into data science curricula?"
url_to_check = "https://www.kent.edu/today/news/pov-importance-integrating-ai-ethics-college-curriculum"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the most impactful research papers published in AI and data science in the last year?"
url_to_check = "https://www.zeta-alpha.com/post/must-read-the-100-most-cited-ai-papers-in-2022"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "Are there any new interdisciplinary areas merging with data science, such as neuroscience or quantum computing?"
url_to_check = "https://medium.com/@david.a.ragland/leveraging-ai-to-propel-interdisciplinary-research-49d67fd6a426"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the latest developments in Python and R for data science?"
url_to_check = "https://www.newhorizons.com/resources/blog/python-vs-r-for-data-analysis"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "Are there any new open-source libraries or frameworks gaining traction in the data science community?"
url_to_check = "https://www.reddit.com/r/datascience/comments/i7w1kh/open_source_framework_for_building_data_science/?rdt=40984"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the latest best practices in deploying machine learning models to production?"
url_to_check = "https://medium.com/@nemagan/best-practices-for-deploying-machine-learning-models-in-production-10b690503e6d"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the top online platforms or courses for learning advanced data science topics in 2025?"
url_to_check = "https://www.upgrad.com/blog/top-online-data-science-courses/"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "What are the best open-source datasets and repositories for academic projects and research?"
url_to_check = "https://www.rasmussen.edu/degrees/technology/blog/open-source-data-resources/"
result = rate_url_validity(user_prompt, url_to_check)
print(result)

user_prompt = "Are there any new certifications that can give data science graduates a competitive edge?"
url_to_check = "https://www.tealhq.com/certifications/data-scientist"
result = rate_url_validity(user_prompt, url_to_check)
print(result)